diff -r 1b9478f8e2e3 pygments/lexers/_mapping.py
--- a/pygments/lexers/_mapping.py	Wed Feb 03 23:42:54 2016 +0100
+++ b/pygments/lexers/_mapping.py	Mon Feb 08 11:19:22 2016 +0100
@@ -396,6 +396,8 @@
     'TypoScriptHtmlDataLexer': ('pygments.lexers.typoscript', 'TypoScriptHtmlData', ('typoscripthtmldata',), (), ()),
     'TypoScriptLexer': ('pygments.lexers.typoscript', 'TypoScript', ('typoscript',), ('*.ts', '*.txt'), ('text/x-typoscript',)),
     'UrbiscriptLexer': ('pygments.lexers.urbi', 'UrbiScript', ('urbiscript',), ('*.u',), ('application/x-urbiscript',)),
+    'VCLLexer': ('pygments.lexers.c_like', 'VCL', ('vcl',), ('*.vcl',), ('text/x-vclsrc',)),
+    'VCLSnippetLexer': ('pygments.lexers.c_like', 'VCLSnippets', ('vclsnippets', 'vclsnippet'), ('*.vcl',), ('text/x-vclsrc',)),
     'VCTreeStatusLexer': ('pygments.lexers.console', 'VCTreeStatus', ('vctreestatus',), (), ()),
     'VGLLexer': ('pygments.lexers.dsls', 'VGL', ('vgl',), ('*.rpf',), ()),
     'ValaLexer': ('pygments.lexers.c_like', 'Vala', ('vala', 'vapi'), ('*.vala', '*.vapi'), ('text/x-vala',)),
diff -r 1b9478f8e2e3 pygments/lexers/c_like.py
--- a/pygments/lexers/c_like.py	Wed Feb 03 23:42:54 2016 +0100
+++ b/pygments/lexers/c_like.py	Mon Feb 08 11:19:22 2016 +0100
@@ -11,7 +11,7 @@
 
 import re
 
-from pygments.lexer import RegexLexer, include, bygroups, inherit, words, \
+from pygments.lexer import RegexLexer, include, bygroups, using, this, inherit, words, \
     default
 from pygments.token import Text, Comment, Operator, Keyword, Name, String, \
     Number, Punctuation
@@ -20,7 +20,8 @@
 from pygments.lexers import _mql_builtins
 
 __all__ = ['PikeLexer', 'NesCLexer', 'ClayLexer', 'ECLexer', 'ValaLexer',
-           'CudaLexer', 'SwigLexer', 'MqlLexer', 'ArduinoLexer']
+           'CudaLexer', 'SwigLexer', 'MqlLexer', 'ArduinoLexer', 'VCLLexer',
+           'VCLSnippetLexer']
 
 
 class PikeLexer(CppLexer):
@@ -63,6 +64,156 @@
     }
 
 
+class VCLLexer(CLexer):
+    """
+    For Varnish Configuration Language (VCL).
+
+    """
+    name = 'VCL'
+    aliases = ['vcl']
+    filenames = [ '*.vcl' ]
+    mimetypes = ['text/x-vclsrc']
+
+    tokens = {
+        'time': [
+            (r'\d+(s|d|w|h|m)',Number)
+            ],
+        'probe': [
+            (r'(\s*\.\w+)(\s*=\s*)([^;]*)(;)',
+            bygroups(Name.Attribute, Operator, using(this), Punctuation)),
+            (r'\s*}', Punctuation, '#pop')
+        ],
+        'backend': [
+            include('whitespace'),
+            (r'(\s*)(\.host|\.port)(\s*=\s*)([^;]*)(\s*;)',
+            bygroups(Punctuation, Name.Attribute, Operator, using(this), Punctuation)),
+            (r'(\s*\.probe)(\s*=\s*)(\w+)(;)',
+            bygroups(Name.Attribute,Operator,Name.Variable.Global,Punctuation)),
+            (r'(\s*\.probe)(\s*=\s*)({)',
+            bygroups(Name.Attribute,Operator,Punctuation),'probe'),
+            (r'{',Punctuation,'#push'),
+            (r'}',Punctuation,'#pop')
+        ],
+        'statements': [
+            include('time'),
+            (r'[~!%^&*+=|?:<>/-]', Operator),
+            (r'\s*(hash_data)(\()(.+)(\)\s*;\s*$)',
+            bygroups(Keyword, Punctuation, using(this), Punctuation)),
+            (r'(\s*set\s)([^\s]+)(\s*=\s*)(.+)(\s*;\s*)($|#.*$|//.*$|/\*.*$)',
+            bygroups(Keyword, Name.Variable, Punctuation, using(this), Punctuation, using(this))),
+            (r'(\s*unset\s)(\s*[^\s]+)(\s*;)',
+            bygroups(Keyword, Name.Variable, Punctuation)),
+            (r'(\s*regsub\s*)(\()(.*)(,)(.*)(,)(.*)(\))',
+            bygroups(Keyword, Punctuation, using(this), Punctuation,
+            using(this), Punctuation, using(this), Punctuation)),
+            (r'(\s*regsuball\s*)(\()(.*)(,)(.*)(,)(.*)(\))',
+            bygroups(Keyword, Punctuation, using(this), Punctuation,
+            using(this), Punctuation, using(this), Punctuation)),
+            (r'(import\s)(\w+)(;\s*)$',
+            bygroups(Keyword, Name.Variable.Global, Punctuation)),
+            (words(('vcl_recv','vcl_pipe','vcl_pass','vcl_hash','vcl_purge',
+                    'vcl_hit','vcl_miss','vcl_deliver','vcl_synth','vcl_backend_fetch',
+                    'vcl_backend_response','vcl_backend_error','vcl_init','vcl_fini'),
+                    suffix=r'\b'),Name.Function),
+            (words(('if','else','elsif','synth',
+                    'synthetic'), suffix=r'\b'),Keyword),
+            (words(('true','false')),Name.Builtin),
+            (r'(\s*call \s*)([^\s;]+)(;)',
+            bygroups(Keyword,Name.Variable.Global,Punctuation)),
+            (r'obj.ttl',Name.Variable),
+            (r'(req|bereq|obj|resp|beresp)\.http\.[^\s]+',Name.Variable),
+            (r'(req|bereq)\.(url|method|xid)',Name.Variable),
+            (r'(resp|beresp|obj)\.(status|reason)',Name.Variable),
+            (r'(beresp|obj)\.(ttl|grace)',Name.Variable),
+            (r'(backend )(\w*)(\s*{)',
+            bygroups(Keyword, Name.Variable.Global, Punctuation), 'backend'),
+            (r'(\s*probe )(\s*\w+\s)({)',
+            bygroups(Keyword,Name.Variable.Global,Punctuation),'probe'),
+            (r'[();]', Punctuation),
+            (r'(client|server)\.(ip|identity)',Name.Variable),
+            (r'^(vcl )(4.0)(;)$',
+            bygroups(Keyword.Reserved,Name.Constant,Punctuation)),
+            ],
+        'sub': [
+            include('whitespace'),
+            include('comments'),
+            include('returns'),
+            include('statements'),
+            (r'\s*\{\s*',Punctuation,'#push'),
+            (r'\s*\}\s*',Punctuation,'#pop') 
+        ],
+        'comment': [
+            (r'[^*/]', Comment.Multiline),
+            (r'/\*', Comment.Multiline, '#push'),
+            (r'\*/', Comment.Multiline, '#pop'),
+            (r'[*/]', Comment.Multiline)
+            ],
+        'comments': [
+            (r'#.*$', Comment),
+            (r'/\*', Comment.Multiline, 'comment'),
+            (r'//.*$', Comment)
+        ],
+        'string': [
+            (r'"', String, '#pop'),
+            (r'[^\\"\n]+', String),  # all other characters
+
+            ],
+        'multistring': [
+            (r'[^"}]', String),
+            (r'{"', String, '#push'),
+            (r'"}', String, '#pop'),
+            (r'["}]', String)
+        ],
+        'whitespace': [
+            (r'L?"', String, 'string'),
+            (r'{"', String, 'multistring'),
+            (r'\n', Text),
+            (r'\s+', Text),
+            (r'\\\n', Text)  # line continuation
+        ],
+        'returns': [
+            (r'(\s*return )(\()(hash|lookup|ok|deliver|miss|fetch|pass|pipe)(\)\s*;$)',
+            bygroups(Keyword, Punctuation, Name.Constant, Punctuation)),
+            (r'(\s*return )(\()(\s*synth\s*)(\()(\s*\d+\s*)(,)([^)]+)(\)\s*\)\s*;)',
+            bygroups(Keyword, Punctuation, Keyword, Punctuation,Number,Punctuation,using(this),Punctuation)),
+            (r'(\s*return )(\()(\s*synth\s*)(\()(\s*\d+\s*)(\)\s*\)\s*;)',
+            bygroups(Keyword, Punctuation, Keyword, Punctuation,Number,Punctuation))
+        ],
+        'root': [
+            include('whitespace'),
+            include('comments'),
+            include('returns'),
+            (r'(sub )(\w+)(\s*{)',
+                bygroups(Keyword, Name.Function, Punctuation),'sub'),
+            include('statements'),
+            (r'\s+', Text)
+        ],
+    }
+
+class VCLSnippetLexer(VCLLexer):
+    """
+    For Varnish Configuration Language snippets.
+    """
+
+    name = 'VCLSnippets'
+    aliases = ['vclsnippets', 'vclsnippet']
+    tokens = {
+        'snippetspre': [
+            (r'\<variable\>', Name.Variable),
+            (r'\<value\>', Name.Variable)
+            ],
+        'snippetspost': [
+            (r'(req|bereq|obj|resp|beresp|client|server)(\.http)?\.\*',Name.Variable),
+            (r'(req|bereq|obj|resp|beresp|client|server)',Name.Variable),
+            (r'(backend)', Keyword.Reserved)
+        ],
+        'root': [
+            include('snippetspre'),
+            inherit,
+            include('snippetspost')
+            ]
+    }
+
 class NesCLexer(CLexer):
     """
     For `nesC <https://github.com/tinyos/nesc>`_ source code with preprocessor
